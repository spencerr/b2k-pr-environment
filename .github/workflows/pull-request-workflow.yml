name: Microservice Pull Request

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      solution-directory: 
        required: true
        type: string
      docker-file-path: 
        required: true
        type: string
      repository:
        required: true
        type: string
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Git - Checkout Branch
      uses: actions/checkout@v3
    
    - name: .NET - Setup
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        
    - name: .NET - Restore Nugets
      run: dotnet restore ${{ inputs.solution-directory }}
      
    - name: .NET - Build
      run: dotnet build ${{ inputs.solution-directory }} --no-restore

    # - name: .NET - Test
    #   run: dotnet test ${{ inputs.solutionPath }} --no-build --verbosity normal

    - name: Git - Generate Version
      id: version
      run: |
        VERSION_TAG="${{ github.run_id }}"
        ATTEMPT=${{ github.run_attempt}}
        if [ $ATTEMPT -gt 1 ]; then
          VERSION_TAG='$VERSION_TAG-$ATTEMPT'
        fi
        echo "Version: $VERSION_TAG"
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT

    - name: Docker - Generate Tags
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: ${{ inputs.repository }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=pr,suffix=-${{ steps.version.outputs.VERSION_TAG }}
          type=sha,enable=${{ github.event_name != 'pull_request' }},format=long
          type=raw,enable=${{ github.event_name != 'pull_request' }},value=alpha-${{ steps.version.outputs.VERSION_TAG }}

    - name: Docker - Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker - Build and Push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ inputs.docker-file-path }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # Initialize PR Environment
    - name: Argo - Setup
      run: |
        curl --insecure -sSL -o /usr/local/bin/argocd https://${{ secrets.ARGOCD_SERVER }}/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Argo - Login
      run: |
        argocd login ${{ secrets.ARGOCD_SERVER }} \
          --insecure \
          --username ${{ secrets.ARGOCD_USERNAME }} \
          --password ${{ secrets.ARGOCD_PASSWORD }}

    - name: Argo - Find Application
      run: |
        APPLICATION_NAME="pr-${{ github.event.pull_request.number }}-${{ inputs.service-name }}"
        echo "APPLICATION_NAME=$APPLICATION_NAME" >> $GITHUB_ENV

    - name: Argo - Create Application
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        argocd app create ${{ env.APPLICATION_NAME }} --upsert \3
          --dest-name in-cluster \
          --dest-namespace alpha \
          --project pull-requests \
          --repo ${{ secrets.ARGOCD_REPOSITORY }} \
          --path apps/b2k-pr-environment/${{ inputs.service-name }} \         
          --values values.yaml,alpha/values.yaml \
          --helm-set ingress.enabled=false \
          --helm-set fullnameOverride=${{ env.APPLICATION_NAME }} \
          --helm-set image.tag=pr-${{ github.event.pull_request.number }}-${{ steps.version.outputs.VERSION_TAG }} \
          --helm-set bridgeToKubernetes.enabled=true \
          --helm-set bridgeToKubernetes.routeFrom=${{ inputs.service-name }} \
          --helm-set bridgeToKubernetes.routeAs=pr-${{ github.event.pull_request.number }} \

    # https://github.com/argoproj/argo-cd/issues/9101
    # - name: Argo - Set Image Tag
    #   run: |
    #     argocd app set ${{ inputs.environment }}-${{ inputs.service-name }} -p image.tag=${{ inputs.image-tag }}

    - name: Argo - Sync
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        argocd app sync ${{ env.APPLICATION_NAME }}

    - name: Argo - Wait
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        argocd app wait ${{ env.APPLICATION_NAME }}

    - name: Argo - Verify
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        argocd app get ${{ env.APPLICATION_NAME }}

    # - name: AKS - Login 
    #   id: login
    #   uses: azure/login@v1.4.3
    #   with:
    #     creds: ${{ secrets.AZURE_AKS_CREDENTIALS }}

    # - name: AKS - Set AKS Context
    #   id: set-context
    #   uses: azure/aks-set-context@v3
    #   with:
    #     resource-group: '${{ secrets.AZURE_AKS_RESOURCE_GROUP }}' 
    #     cluster-name: '${{ secrets.AZURE_AKS_CLUSTER_NAME }}'

    # - name: AKS - Install Helm
    #   uses: Azure/setup-helm@v3
    #   with:
    #     version: 'latest'
    #     token: ${{ secrets.GITHUB_TOKEN }}

    # - name: AKS - Deploy Helm Chart
    #   run: >
    #     helm upgrade ${{ env.helmDeployment }} ${{ inputs.helmChartPath }}
    #     --install
    #     --force
    #     --namespace ${{ inputs.namespace }}
    #     --create-namespace
    #     --set-string image.tag='${{ env.tag }}'
    #     --set-string fullnameOverride='${{ env.helmDeployment }}'
    #     --set ingress.enabled=false

    # - name: AKS - Add Bridge To Kubernetes Routing
    #   run: |
    #     kubectl label pods \
    #     --selector="app.kubernetes.io/name=${{ inputs.serviceName }},app.kubernetes.io/instance=${{ env.helmDeployment }}" \
    #     routing.visualstudio.io/route-from=${{ inputs.serviceName }} \
    #     -n ${{ inputs.namespace }} --overwrite=true

    #     kubectl annotate pods \
    #     --selector="app.kubernetes.io/name=${{ inputs.serviceName }},app.kubernetes.io/instance=${{ env.helmDeployment }}" \
    #     routing.visualstudio.io/route-on-header=kubernetes-route-as=${{ env.isolationVersion }} \
    #     -n ${{ inputs.namespace }} --overwrite=true